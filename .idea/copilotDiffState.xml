<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-ui:0.17.0&quot;)&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-editor:0.17.0&quot;)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-ui:0.16.0&quot;)&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-editor:0.16.0&quot;)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/TodoScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/TodoScreen.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.LargeTopAppBar&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.ui.draw.scale&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.masum.todo.presentation.components.EmptyState&#10;import com.masum.todo.presentation.components.SearchAndFilterBar&#10;import com.masum.todo.presentation.components.TaskDialog&#10;import com.masum.todo.presentation.components.TodoGrid&#10;import com.masum.todo.presentation.components.TodoList&#10;import com.masum.todo.presentation.components.ViewToggleButton&#10;import com.masum.todo.presentation.viewmodel.TodoUiEvent&#10;import com.masum.todo.presentation.viewmodel.TodoViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TodoScreen(&#10;    viewModel: TodoViewModel = viewModel(),&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scrollBehavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior()&#10;&#10;    LaunchedEffect(uiState.snackbarMessage) {&#10;        uiState.snackbarMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            viewModel.onEvent(TodoUiEvent.ClearSnackbarMessage)&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = modifier&#10;            .nestedScroll(scrollBehavior.nestedScrollConnection)&#10;            .statusBarsPadding(),&#10;        topBar = {&#10;            LargeTopAppBar(&#10;                title = {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;My Tasks&quot;,&#10;                            style = MaterialTheme.typography.displayMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        if (uiState.tasks.isNotEmpty()) {&#10;                            val completedCount = uiState.tasks.count { it.isCompleted }&#10;                            val totalCount = uiState.tasks.size&#10;                            Text(&#10;                                text = &quot;$completedCount of $totalCount completed&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.secondary,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                actions = {&#10;                    Row {&#10;                        IconButton(&#10;                            onClick = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleSearchBar)&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Search,&#10;                                contentDescription = &quot;Search&quot;,&#10;                                tint = if (uiState.showSearchBar) MaterialTheme.colorScheme.primary&#10;                                       else MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                        &#10;                        IconButton(&#10;                            onClick = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleFilterOptions)&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.FilterList,&#10;                                contentDescription = &quot;Filter&quot;,&#10;                                tint = if (uiState.showFilterOptions) MaterialTheme.colorScheme.primary&#10;                                       else MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                        &#10;                        ViewToggleButton(&#10;                            isGridView = uiState.isGridView,&#10;                            onToggleView = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleViewMode)&#10;                            }&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.largeTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.onBackground&#10;                ),&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },&#10;        floatingActionButton = {&#10;            val fabScale by animateFloatAsState(&#10;                targetValue = if (uiState.isLoading) 0.8f else 1f,&#10;                animationSpec = tween(300),&#10;                label = &quot;fab_scale&quot;&#10;            )&#10;            &#10;            ExtendedFloatingActionButton(&#10;                onClick = {&#10;                    viewModel.onEvent(TodoUiEvent.ShowTaskEditor)&#10;                },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.scale(fabScale)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Add, &#10;                    contentDescription = &quot;Create Task&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Create Task&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.1f),&#10;                            MaterialTheme.colorScheme.background&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(innerPadding)&#10;                    .fillMaxSize()&#10;            ) {&#10;                SearchAndFilterBar(&#10;                    searchQuery = uiState.searchQuery,&#10;                    selectedFilter = uiState.selectedFilter,&#10;                    selectedSort = uiState.selectedSort,&#10;                    showSearchBar = uiState.showSearchBar,&#10;                    showFilterOptions = uiState.showFilterOptions,&#10;                    filteredTasksCount = tasksToShow.size,&#10;                    onSearchQueryChange = { query -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateSearchQuery(query))&#10;                    },&#10;                    onFilterChange = { filter -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateFilter(filter))&#10;                    },&#10;                    onSortChange = { sort -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateSort(sort))&#10;                    },&#10;                    onClearSearch = {&#10;                        viewModel.onEvent(TodoUiEvent.ClearSearch)&#10;                    }&#10;                )&#10;                &#10;                val tasksToShow = if (uiState.searchQuery.isNotEmpty() || &#10;                                    uiState.selectedFilter != com.masum.todo.presentation.viewmodel.FilterType.ALL) {&#10;                    uiState.filteredTasks&#10;                } else {&#10;                    uiState.tasks&#10;                }&#10;                &#10;                if (uiState.tasks.isNotEmpty()) {&#10;                    TaskSummaryCard(&#10;                        totalTasks = uiState.tasks.size,&#10;                        completedTasks = uiState.tasks.count { it.isCompleted },&#10;                        filteredCount = if (tasksToShow != uiState.tasks) tasksToShow.size else null,&#10;                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                    )&#10;                }&#10;                &#10;                when {&#10;                    uiState.isLoading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                strokeWidth = 3.dp&#10;                            )&#10;                        }&#10;                    }&#10;                    uiState.tasks.isEmpty() -&gt; {&#10;                        EmptyState()&#10;                    }&#10;                    tasksToShow.isEmpty() -&gt; {&#10;                        EmptySearchState()&#10;                    }&#10;                    else -&gt; {&#10;                        if (uiState.isGridView) {&#10;                            TodoGrid(&#10;                                tasks = tasksToShow,&#10;                                onTaskChecked = { task, isChecked -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ToggleTaskCompletion(task, isChecked))&#10;                                },&#10;                                onDeleteTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.DeleteTask(task))&#10;                                },&#10;                                onEditTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ShowTaskEditorForEdit(task))&#10;                                }&#10;                            )&#10;                        } else {&#10;                            TodoList(&#10;                                tasks = tasksToShow,&#10;                                onTaskChecked = { task, isChecked -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ToggleTaskCompletion(task, isChecked))&#10;                                },&#10;                                onDeleteTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.DeleteTask(task))&#10;                                },&#10;                                onEditTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ShowTaskEditorForEdit(task))&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (uiState.showAddDialog) {&#10;        TaskDialog(&#10;            dialogTitle = &quot;Add New Task&quot;,&#10;            taskHeading = uiState.currentTaskHeading,&#10;            taskBody = uiState.currentTaskBody,&#10;            taskColor = uiState.currentTaskColor,&#10;            onHeadingChange = { heading -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskHeading(heading))&#10;            },&#10;            onBodyChange = { body -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskBody(body))&#10;            },&#10;            onColorChange = { color -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskColor(color))&#10;            },&#10;            onDismiss = {&#10;                viewModel.onEvent(TodoUiEvent.HideAddDialog)&#10;            },&#10;            onConfirm = {&#10;                viewModel.onEvent(TodoUiEvent.AddTask(uiState.currentTaskHeading, uiState.currentTaskBody))&#10;            },&#10;            confirmButtonText = &quot;Add&quot;&#10;        )&#10;    }&#10;&#10;    if (uiState.showEditDialog &amp;&amp; uiState.taskToEdit != null) {&#10;        TaskDialog(&#10;            dialogTitle = &quot;Edit Task&quot;,&#10;            taskHeading = uiState.currentTaskHeading,&#10;            taskBody = uiState.currentTaskBody,&#10;            taskColor = uiState.currentTaskColor,&#10;            onHeadingChange = { heading -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskHeading(heading))&#10;            },&#10;            onBodyChange = { body -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskBody(body))&#10;            },&#10;            onColorChange = { color -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskColor(color))&#10;            },&#10;            onDismiss = {&#10;                viewModel.onEvent(TodoUiEvent.HideEditDialog)&#10;            },&#10;            onConfirm = {&#10;                uiState.taskToEdit?.let { task -&gt;&#10;                    viewModel.onEvent(TodoUiEvent.UpdateTask(task))&#10;                }&#10;            },&#10;            confirmButtonText = &quot;Save&quot;&#10;        )&#10;    }&#10;&#10;    &#10;    if (uiState.showTaskEditor) {&#10;        TaskEditorScreen(&#10;            taskId = uiState.taskToEdit?.id,&#10;            onNavigateBack = {&#10;                viewModel.onEvent(TodoUiEvent.HideTaskEditor)&#10;            },&#10;            onSaveTask = { heading, body, color, priority, dueDate, subtasks, tags -&gt;&#10;                viewModel.onEvent(&#10;                    TodoUiEvent.AddAdvancedTask(&#10;                        heading = heading,&#10;                        body = body,&#10;                        color = color,&#10;                        priority = priority,&#10;                        dueDate = dueDate,&#10;                        subtasks = subtasks,&#10;                        tags = tags&#10;                    )&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptySearchState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;No tasks found&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Try adjusting your search or filters&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TaskSummaryCard(&#10;    totalTasks: Int,&#10;    completedTasks: Int,&#10;    filteredCount: Int? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceEvenly,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TaskStatItem(&#10;                icon = Icons.Default.List,&#10;                label = &quot;Total&quot;,&#10;                count = totalTasks,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            TaskStatItem(&#10;                icon = Icons.Default.CheckCircle,&#10;                label = &quot;Completed&quot;,&#10;                count = completedTasks,&#10;                color = Color(0xFF4CAF50)&#10;            )&#10;            &#10;            if (filteredCount != null) {&#10;                TaskStatItem(&#10;                    icon = Icons.Default.FilterList,&#10;                    label = &quot;Filtered&quot;,&#10;                    count = filteredCount,&#10;                    color = MaterialTheme.colorScheme.secondary&#10;                )&#10;            } else {&#10;                TaskStatItem(&#10;                    icon = Icons.Default.List,&#10;                    label = &quot;Remaining&quot;,&#10;                    count = totalTasks - completedTasks,&#10;                    color = MaterialTheme.colorScheme.tertiary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TaskStatItem(&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    label: String,&#10;    count: Int,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = color,&#10;            modifier = Modifier&#10;                .size(32.dp)&#10;                .clip(RoundedCornerShape(8.dp))&#10;                .background(color.copy(alpha = 0.1f))&#10;                .padding(6.dp)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = count.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = color&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.List&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.LargeTopAppBar&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.input.nestedscroll.nestedScroll&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.ui.draw.scale&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.masum.todo.presentation.components.EmptyState&#10;import com.masum.todo.presentation.components.SearchAndFilterBar&#10;import com.masum.todo.presentation.components.TaskDialog&#10;import com.masum.todo.presentation.components.TodoGrid&#10;import com.masum.todo.presentation.components.TodoList&#10;import com.masum.todo.presentation.components.ViewToggleButton&#10;import com.masum.todo.presentation.viewmodel.TodoUiEvent&#10;import com.masum.todo.presentation.viewmodel.TodoViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TodoScreen(&#10;    viewModel: TodoViewModel = viewModel(),&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;    val scrollBehavior = TopAppBarDefaults.exitUntilCollapsedScrollBehavior()&#10;&#10;    LaunchedEffect(uiState.snackbarMessage) {&#10;        uiState.snackbarMessage?.let { message -&gt;&#10;            snackbarHostState.showSnackbar(message)&#10;            viewModel.onEvent(TodoUiEvent.ClearSnackbarMessage)&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        modifier = modifier&#10;            .nestedScroll(scrollBehavior.nestedScrollConnection)&#10;            .statusBarsPadding(),&#10;        topBar = {&#10;            LargeTopAppBar(&#10;                title = {&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;My Tasks&quot;,&#10;                            style = MaterialTheme.typography.displayMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                        if (uiState.tasks.isNotEmpty()) {&#10;                            val completedCount = uiState.tasks.count { it.isCompleted }&#10;                            val totalCount = uiState.tasks.size&#10;                            Text(&#10;                                text = &quot;$completedCount of $totalCount completed&quot;,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.secondary,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;                },&#10;                actions = {&#10;                    Row {&#10;                        IconButton(&#10;                            onClick = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleSearchBar)&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Search,&#10;                                contentDescription = &quot;Search&quot;,&#10;                                tint = if (uiState.showSearchBar) MaterialTheme.colorScheme.primary&#10;                                       else MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                        &#10;                        IconButton(&#10;                            onClick = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleFilterOptions)&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.FilterList,&#10;                                contentDescription = &quot;Filter&quot;,&#10;                                tint = if (uiState.showFilterOptions) MaterialTheme.colorScheme.primary&#10;                                       else MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                        &#10;                        ViewToggleButton(&#10;                            isGridView = uiState.isGridView,&#10;                            onToggleView = {&#10;                                viewModel.onEvent(TodoUiEvent.ToggleViewMode)&#10;                            }&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.largeTopAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.onBackground&#10;                ),&#10;                scrollBehavior = scrollBehavior&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(hostState = snackbarHostState) },&#10;        floatingActionButton = {&#10;            val fabScale by animateFloatAsState(&#10;                targetValue = if (uiState.isLoading) 0.8f else 1f,&#10;                animationSpec = tween(300),&#10;                label = &quot;fab_scale&quot;&#10;            )&#10;            &#10;            ExtendedFloatingActionButton(&#10;                onClick = {&#10;                    viewModel.onEvent(TodoUiEvent.ShowTaskEditor)&#10;                },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary,&#10;                modifier = Modifier.scale(fabScale)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.Add, &#10;                    contentDescription = &quot;Create Task&quot;,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Create Task&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    ) { innerPadding -&gt;&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(&#10;                    Brush.verticalGradient(&#10;                        colors = listOf(&#10;                            MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.1f),&#10;                            MaterialTheme.colorScheme.background&#10;                        )&#10;                    )&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .padding(innerPadding)&#10;                    .fillMaxSize()&#10;            ) {&#10;                val tasksToShow = if (uiState.searchQuery.isNotEmpty() || &#10;                                    uiState.selectedFilter != com.masum.todo.presentation.viewmodel.FilterType.ALL) {&#10;                    uiState.filteredTasks&#10;                } else {&#10;                    uiState.tasks&#10;                }&#10;                SearchAndFilterBar(&#10;                    searchQuery = uiState.searchQuery,&#10;                    selectedFilter = uiState.selectedFilter,&#10;                    selectedSort = uiState.selectedSort,&#10;                    showSearchBar = uiState.showSearchBar,&#10;                    showFilterOptions = uiState.showFilterOptions,&#10;                    filteredTasksCount = tasksToShow.size,&#10;                    onSearchQueryChange = { query -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateSearchQuery(query))&#10;                    },&#10;                    onFilterChange = { filter -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateFilter(filter))&#10;                    },&#10;                    onSortChange = { sort -&gt;&#10;                        viewModel.onEvent(TodoUiEvent.UpdateSort(sort))&#10;                    },&#10;                    onClearSearch = {&#10;                        viewModel.onEvent(TodoUiEvent.ClearSearch)&#10;                    }&#10;                )&#10;                &#10;                if (uiState.tasks.isNotEmpty()) {&#10;                    TaskSummaryCard(&#10;                        totalTasks = uiState.tasks.size,&#10;                        completedTasks = uiState.tasks.count { it.isCompleted },&#10;                        filteredCount = if (tasksToShow != uiState.tasks) tasksToShow.size else null,&#10;                        modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                    )&#10;                }&#10;                &#10;                when {&#10;                    uiState.isLoading -&gt; {&#10;                        Box(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                color = MaterialTheme.colorScheme.primary,&#10;                                strokeWidth = 3.dp&#10;                            )&#10;                        }&#10;                    }&#10;                    uiState.tasks.isEmpty() -&gt; {&#10;                        EmptyState()&#10;                    }&#10;                    tasksToShow.isEmpty() -&gt; {&#10;                        EmptySearchState()&#10;                    }&#10;                    else -&gt; {&#10;                        if (uiState.isGridView) {&#10;                            TodoGrid(&#10;                                tasks = tasksToShow,&#10;                                onTaskChecked = { task, isChecked -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ToggleTaskCompletion(task, isChecked))&#10;                                },&#10;                                onDeleteTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.DeleteTask(task))&#10;                                },&#10;                                onEditTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ShowTaskEditorForEdit(task))&#10;                                }&#10;                            )&#10;                        } else {&#10;                            TodoList(&#10;                                tasks = tasksToShow,&#10;                                onTaskChecked = { task, isChecked -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ToggleTaskCompletion(task, isChecked))&#10;                                },&#10;                                onDeleteTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.DeleteTask(task))&#10;                                },&#10;                                onEditTask = { task -&gt;&#10;                                    viewModel.onEvent(TodoUiEvent.ShowTaskEditorForEdit(task))&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    if (uiState.showAddDialog) {&#10;        TaskDialog(&#10;            dialogTitle = &quot;Add New Task&quot;,&#10;            taskHeading = uiState.currentTaskHeading,&#10;            taskBody = uiState.currentTaskBody,&#10;            taskColor = uiState.currentTaskColor,&#10;            onHeadingChange = { heading -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskHeading(heading))&#10;            },&#10;            onBodyChange = { body -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskBody(body))&#10;            },&#10;            onColorChange = { color -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskColor(color))&#10;            },&#10;            onDismiss = {&#10;                viewModel.onEvent(TodoUiEvent.HideAddDialog)&#10;            },&#10;            onConfirm = {&#10;                viewModel.onEvent(TodoUiEvent.AddTask(uiState.currentTaskHeading, uiState.currentTaskBody))&#10;            },&#10;            confirmButtonText = &quot;Add&quot;&#10;        )&#10;    }&#10;&#10;    if (uiState.showEditDialog &amp;&amp; uiState.taskToEdit != null) {&#10;        TaskDialog(&#10;            dialogTitle = &quot;Edit Task&quot;,&#10;            taskHeading = uiState.currentTaskHeading,&#10;            taskBody = uiState.currentTaskBody,&#10;            taskColor = uiState.currentTaskColor,&#10;            onHeadingChange = { heading -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskHeading(heading))&#10;            },&#10;            onBodyChange = { body -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskBody(body))&#10;            },&#10;            onColorChange = { color -&gt;&#10;                viewModel.onEvent(TodoUiEvent.UpdateCurrentTaskColor(color))&#10;            },&#10;            onDismiss = {&#10;                viewModel.onEvent(TodoUiEvent.HideEditDialog)&#10;            },&#10;            onConfirm = {&#10;                uiState.taskToEdit?.let { task -&gt;&#10;                    viewModel.onEvent(TodoUiEvent.UpdateTask(task))&#10;                }&#10;            },&#10;            confirmButtonText = &quot;Save&quot;&#10;        )&#10;    }&#10;&#10;    &#10;    if (uiState.showTaskEditor) {&#10;        TaskEditorScreen(&#10;            taskId = uiState.taskToEdit?.id,&#10;            onNavigateBack = {&#10;                viewModel.onEvent(TodoUiEvent.HideTaskEditor)&#10;            },&#10;            onSaveTask = { heading, body, color, priority, dueDate, subtasks, tags -&gt;&#10;                viewModel.onEvent(&#10;                    TodoUiEvent.AddAdvancedTask(&#10;                        heading = heading,&#10;                        body = body,&#10;                        color = color,&#10;                        priority = priority,&#10;                        dueDate = dueDate,&#10;                        subtasks = subtasks,&#10;                        tags = tags&#10;                    )&#10;                )&#10;            }&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptySearchState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Search,&#10;                contentDescription = null,&#10;                modifier = Modifier.size(64.dp),&#10;                tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;No tasks found&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            Text(&#10;                text = &quot;Try adjusting your search or filters&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TaskSummaryCard(&#10;    totalTasks: Int,&#10;    completedTasks: Int,&#10;    filteredCount: Int? = null,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(20.dp),&#10;            horizontalArrangement = Arrangement.SpaceEvenly,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            TaskStatItem(&#10;                icon = Icons.Default.List,&#10;                label = &quot;Total&quot;,&#10;                count = totalTasks,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;            &#10;            TaskStatItem(&#10;                icon = Icons.Default.CheckCircle,&#10;                label = &quot;Completed&quot;,&#10;                count = completedTasks,&#10;                color = Color(0xFF4CAF50)&#10;            )&#10;            &#10;            if (filteredCount != null) {&#10;                TaskStatItem(&#10;                    icon = Icons.Default.FilterList,&#10;                    label = &quot;Filtered&quot;,&#10;                    count = filteredCount,&#10;                    color = MaterialTheme.colorScheme.secondary&#10;                )&#10;            } else {&#10;                TaskStatItem(&#10;                    icon = Icons.Default.List,&#10;                    label = &quot;Remaining&quot;,&#10;                    count = totalTasks - completedTasks,&#10;                    color = MaterialTheme.colorScheme.tertiary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TaskStatItem(&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    label: String,&#10;    count: Int,&#10;    color: Color,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = label,&#10;            tint = color,&#10;            modifier = Modifier&#10;                .size(32.dp)&#10;                .clip(RoundedCornerShape(8.dp))&#10;                .background(color.copy(alpha = 0.1f))&#10;                .padding(6.dp)&#10;        )&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = count.toString(),&#10;            style = MaterialTheme.typography.headlineSmall,&#10;            fontWeight = FontWeight.Bold,&#10;            color = color&#10;        )&#10;        Text(&#10;            text = label,&#10;            style = MaterialTheme.typography.bodySmall,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.GridView&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Default.ViewList else Icons.Default.GridView,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Filled.ViewList else Icons.Filled.ViewModule,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;}&#10;&#10;rootProject.name = &quot;Todo&quot;&#10;include(&quot;:app&quot;)&#10;" />
              <option name="updatedContent" value="pluginManagement {&#13;&#10;    repositories {&#13;&#10;        google {&#13;&#10;            content {&#13;&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#13;&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#13;&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        mavenCentral()&#13;&#10;        gradlePluginPortal()&#13;&#10;    }&#13;&#10;}&#13;&#10;dependencyResolutionManagement {&#13;&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#13;&#10;    repositories {&#13;&#10;        google()&#13;&#10;        mavenCentral()&#13;&#10;        maven(&quot;https://jitpack.io&quot;)&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;rootProject.name = &quot;Todo&quot;&#13;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>