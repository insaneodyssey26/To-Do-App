<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlaylistAdd&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PlaylistAdd,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/TaskDialog.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/TaskDialog.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Task&#10;import androidx.compose.material.icons.filled.Description&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun TaskDialog(&#10;    dialogTitle: String,&#10;    taskHeading: String,&#10;    taskBody: String,&#10;    onHeadingChange: (String) -&gt; Unit,&#10;    onBodyChange: (String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onConfirm: () -&gt; Unit,&#10;    confirmButtonText: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { &#10;            Text(&#10;                text = dialogTitle,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        },&#10;        text = {&#10;            Column(&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = taskHeading,&#10;                    onValueChange = onHeadingChange,&#10;                    label = { Text(&quot;Task heading&quot;) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Task,&#10;                            contentDescription = &quot;Task heading&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                        focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                        focusedLeadingIconColor = MaterialTheme.colorScheme.primary&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = taskBody,&#10;                    onValueChange = onBodyChange,&#10;                    label = { Text(&quot;Task description (optional)&quot;) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Description,&#10;                            contentDescription = &quot;Task description&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    minLines = 3,&#10;                    maxLines = 5,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                        focusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                        focusedLeadingIconColor = MaterialTheme.colorScheme.secondary&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onConfirm,&#10;                enabled = taskHeading.isNotBlank()&#10;            ) {&#10;                Text(&#10;                    text = confirmButtonText,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = if (taskHeading.isNotBlank()) &#10;                        MaterialTheme.colorScheme.primary &#10;                    else &#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&#10;                    text = &quot;Cancel&quot;,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        },&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(20.dp),&#10;        containerColor = MaterialTheme.colorScheme.surface,&#10;        titleContentColor = MaterialTheme.colorScheme.onSurface,&#10;        textContentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.List // Use List icon instead of Task&#10;import androidx.compose.material.icons.filled.Edit // Use Edit icon instead of Description&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.OutlinedTextFieldDefaults&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun TaskDialog(&#10;    dialogTitle: String,&#10;    taskHeading: String,&#10;    taskBody: String,&#10;    onHeadingChange: (String) -&gt; Unit,&#10;    onBodyChange: (String) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    onConfirm: () -&gt; Unit,&#10;    confirmButtonText: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = { &#10;            Text(&#10;                text = dialogTitle,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        },&#10;        text = {&#10;            Column(&#10;                modifier = Modifier.padding(vertical = 8.dp)&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = taskHeading,&#10;                    onValueChange = onHeadingChange,&#10;                    label = { Text(&quot;Task heading&quot;) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.List,&#10;                            contentDescription = &quot;Task heading&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    singleLine = true,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.primary,&#10;                        focusedLabelColor = MaterialTheme.colorScheme.primary,&#10;                        focusedLeadingIconColor = MaterialTheme.colorScheme.primary&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                OutlinedTextField(&#10;                    value = taskBody,&#10;                    onValueChange = onBodyChange,&#10;                    label = { Text(&quot;Task description (optional)&quot;) },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Edit,&#10;                            contentDescription = &quot;Task description&quot;,&#10;                            tint = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    minLines = 3,&#10;                    maxLines = 5,&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedBorderColor = MaterialTheme.colorScheme.secondary,&#10;                        focusedLabelColor = MaterialTheme.colorScheme.secondary,&#10;                        focusedLeadingIconColor = MaterialTheme.colorScheme.secondary&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onConfirm,&#10;                enabled = taskHeading.isNotBlank()&#10;            ) {&#10;                Text(&#10;                    text = confirmButtonText,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = if (taskHeading.isNotBlank()) &#10;                        MaterialTheme.colorScheme.primary &#10;                    else &#10;                        MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&#10;                    text = &quot;Cancel&quot;,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        },&#10;        modifier = modifier,&#10;        shape = RoundedCornerShape(20.dp),&#10;        containerColor = MaterialTheme.colorScheme.surface,&#10;        titleContentColor = MaterialTheme.colorScheme.onSurface,&#10;        textContentColor = MaterialTheme.colorScheme.onSurfaceVariant&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/ui/theme/Type.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/ui/theme/Type.kt" />
              <option name="originalContent" value="package com.masum.todo.ui.theme&#10;&#10;import android.R.attr.fontFamily&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;&#10;)" />
              <option name="updatedContent" value="package com.masum.todo.ui.theme&#10;&#10;import android.R.attr.fontFamily&#10;import androidx.compose.material3.Typography&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;&#10;val Typography = Typography(&#10;    bodyLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 16.sp,&#10;        lineHeight = 24.sp,&#10;        letterSpacing = 0.5.sp&#10;    ), // &lt;-- Added missing comma&#10;&#10;    titleLarge = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Normal,&#10;        fontSize = 22.sp,&#10;        lineHeight = 28.sp,&#10;        letterSpacing = 0.sp&#10;    ),&#10;    labelSmall = TextStyle(&#10;        fontFamily = FontFamily.Default,&#10;        fontWeight = FontWeight.Medium,&#10;        fontSize = 11.sp,&#10;        lineHeight = 16.sp,&#10;        letterSpacing = 0.5.sp&#10;    )&#10;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>