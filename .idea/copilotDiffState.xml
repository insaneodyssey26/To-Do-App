<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-ui:0.17.0&quot;)&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-editor:0.17.0&quot;)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-ui:0.16.0&quot;)&#10;    implementation(&quot;io.github.halilozercan:compose-richtext-editor:0.16.0&quot;)&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.GridView&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Default.ViewList else Icons.Default.GridView,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Filled.ViewList else Icons.Filled.ViewModule,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/settings.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/settings.gradle.kts" />
              <option name="originalContent" value="pluginManagement {&#10;    repositories {&#10;        google {&#10;            content {&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#10;            }&#10;        }&#10;        mavenCentral()&#10;        gradlePluginPortal()&#10;    }&#10;}&#10;dependencyResolutionManagement {&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;}&#10;&#10;rootProject.name = &quot;Todo&quot;&#10;include(&quot;:app&quot;)&#10;" />
              <option name="updatedContent" value="pluginManagement {&#13;&#10;    repositories {&#13;&#10;        google {&#13;&#10;            content {&#13;&#10;                includeGroupByRegex(&quot;com\\.android.*&quot;)&#13;&#10;                includeGroupByRegex(&quot;com\\.google.*&quot;)&#13;&#10;                includeGroupByRegex(&quot;androidx.*&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        mavenCentral()&#13;&#10;        gradlePluginPortal()&#13;&#10;    }&#13;&#10;}&#13;&#10;dependencyResolutionManagement {&#13;&#10;    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)&#13;&#10;    repositories {&#13;&#10;        google()&#13;&#10;        mavenCentral()&#13;&#10;        maven(&quot;https://jitpack.io&quot;)&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;rootProject.name = &quot;Todo&quot;&#13;&#10;include(&quot;:app&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>