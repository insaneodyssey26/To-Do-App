<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;    &#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/TaskEditorScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/TaskEditorScreen.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.ExperimentalLayoutApi&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Attachment&#10;import androidx.compose.material.icons.filled.CalendarToday&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.FormatBold&#10;import androidx.compose.material.icons.filled.FormatItalic&#10;import androidx.compose.material.icons.filled.FormatListBulleted&#10;import androidx.compose.material.icons.filled.FormatListNumbered&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.KeyboardVoice&#10;import androidx.compose.material.icons.filled.Label&#10;import androidx.compose.material.icons.filled.Priority&#10;import androidx.compose.material.icons.filled.Save&#10;import androidx.compose.material.icons.filled.Task&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Checkbox&#10;import androidx.compose.material3.DatePicker&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FilterChip&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import com.masum.todo.domain.model.TaskColor&#10;import com.masum.todo.domain.model.TaskPriority&#10;import com.masum.todo.domain.model.Subtask&#10;import com.masum.todo.presentation.components.ColorPicker&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)&#10;@Composable&#10;fun TaskEditorScreen(&#10;    taskId: Int? = null,&#10;    onNavigateBack: () -&gt; Unit,&#10;    onSaveTask: (&#10;        heading: String,&#10;        body: String,&#10;        color: TaskColor,&#10;        priority: TaskPriority,&#10;        dueDate: Date?,&#10;        subtasks: List&lt;Subtask&gt;,&#10;        tags: List&lt;String&gt;&#10;    ) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var taskHeading by remember { mutableStateOf(&quot;&quot;) }&#10;    var taskBody by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedColor by remember { mutableStateOf(TaskColor.DEFAULT) }&#10;    var selectedPriority by remember { mutableStateOf(TaskPriority.MEDIUM) }&#10;    var dueDate by remember { mutableStateOf&lt;Date?&gt;(null) }&#10;    var subtasks by remember { mutableStateOf(listOf&lt;Subtask&gt;()) }&#10;    var tags by remember { mutableStateOf(listOf&lt;String&gt;()) }&#10;    var newSubtaskText by remember { mutableStateOf(&quot;&quot;) }&#10;    var newTagText by remember { mutableStateOf(&quot;&quot;) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showColorPicker by remember { mutableStateOf(false) }&#10;    var showPrioritySelector by remember { mutableStateOf(false) }&#10;    var isBold by remember { mutableStateOf(false) }&#10;    var isItalic by remember { mutableStateOf(false) }&#10;    &#10;    val keyboardController = LocalSoftwareKeyboardController.current&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        text = if (taskId == null) &quot;Create Task&quot; else &quot;Edit Task&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            ExtendedFloatingActionButton(&#10;                onClick = {&#10;                    if (taskHeading.isNotBlank()) {&#10;                        onSaveTask(&#10;                            taskHeading,&#10;                            taskBody,&#10;                            selectedColor,&#10;                            selectedPriority,&#10;                            dueDate,&#10;                            subtasks,&#10;                            tags&#10;                        )&#10;                        onNavigateBack()&#10;                    }&#10;                },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Save,&#10;                    contentDescription = &quot;Save Task&quot;&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Save Task&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Task Title&#10;            OutlinedTextField(&#10;                value = taskHeading,&#10;                onValueChange = { taskHeading = it },&#10;                label = { Text(&quot;Task Title&quot;) },&#10;                placeholder = { Text(&quot;What needs to be done?&quot;) },&#10;                leadingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Task,&#10;                        contentDescription = &quot;Task&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Rich Text Toolbar&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                ) {&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatBold,&#10;                        isSelected = isBold,&#10;                        onClick = { isBold = !isBold }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatItalic,&#10;                        isSelected = isItalic,&#10;                        onClick = { isItalic = !isItalic }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatListBulleted,&#10;                        isSelected = false,&#10;                        onClick = { /* Add bullet list */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatListNumbered,&#10;                        isSelected = false,&#10;                        onClick = { /* Add numbered list */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.Image,&#10;                        isSelected = false,&#10;                        onClick = { /* Add image */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.KeyboardVoice,&#10;                        isSelected = false,&#10;                        onClick = { /* Add voice note */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.Attachment,&#10;                        isSelected = false,&#10;                        onClick = { /* Add attachment */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Task Description&#10;            OutlinedTextField(&#10;                value = taskBody,&#10;                onValueChange = { taskBody = it },&#10;                label = { Text(&quot;Description&quot;) },&#10;                placeholder = { Text(&quot;Add details about your task...&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp),&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Quick Actions Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                QuickActionButton(&#10;                    icon = Icons.Default.Priority,&#10;                    label = selectedPriority.displayName,&#10;                    color = Color(selectedPriority.color),&#10;                    onClick = { showPrioritySelector = !showPrioritySelector }&#10;                )&#10;                QuickActionButton(&#10;                    icon = Icons.Default.CalendarToday,&#10;                    label = dueDate?.let { dateFormat.format(it) } ?: &quot;Due Date&quot;,&#10;                    color = MaterialTheme.colorScheme.secondary,&#10;                    onClick = { showDatePicker = true }&#10;                )&#10;                QuickActionButton(&#10;                    icon = Icons.Default.Label,&#10;                    label = &quot;Color&quot;,&#10;                    color = selectedColor.color,&#10;                    onClick = { showColorPicker = !showColorPicker }&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Priority Selector&#10;            AnimatedVisibility(&#10;                visible = showPrioritySelector,&#10;                enter = expandVertically() + fadeIn(),&#10;                exit = shrinkVertically() + fadeOut()&#10;            ) {&#10;                PrioritySelector(&#10;                    selectedPriority = selectedPriority,&#10;                    onPrioritySelected = { &#10;                        selectedPriority = it&#10;                        showPrioritySelector = false&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Color Picker&#10;            AnimatedVisibility(&#10;                visible = showColorPicker,&#10;                enter = expandVertically() + fadeIn(),&#10;                exit = shrinkVertically() + fadeOut()&#10;            ) {&#10;                Column {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    ColorPicker(&#10;                        selectedColor = selectedColor,&#10;                        onColorSelected = { &#10;                            selectedColor = it&#10;                            showColorPicker = false&#10;                        }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;            // Subtasks Section&#10;            SubtasksSection(&#10;                subtasks = subtasks,&#10;                newSubtaskText = newSubtaskText,&#10;                onNewSubtaskTextChange = { newSubtaskText = it },&#10;                onAddSubtask = {&#10;                    if (newSubtaskText.isNotBlank()) {&#10;                        subtasks = subtasks + Subtask(&#10;                            id = UUID.randomUUID().toString(),&#10;                            title = newSubtaskText&#10;                        )&#10;                        newSubtaskText = &quot;&quot;&#10;                    }&#10;                },&#10;                onToggleSubtask = { subtaskId -&gt;&#10;                    subtasks = subtasks.map { subtask -&gt;&#10;                        if (subtask.id == subtaskId) {&#10;                            subtask.copy(isCompleted = !subtask.isCompleted)&#10;                        } else subtask&#10;                    }&#10;                },&#10;                onDeleteSubtask = { subtaskId -&gt;&#10;                    subtasks = subtasks.filter { it.id != subtaskId }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Tags Section&#10;            TagsSection(&#10;                tags = tags,&#10;                newTagText = newTagText,&#10;                onNewTagTextChange = { newTagText = it },&#10;                onAddTag = {&#10;                    if (newTagText.isNotBlank() &amp;&amp; !tags.contains(newTagText)) {&#10;                        tags = tags + newTagText&#10;                        newTagText = &quot;&quot;&#10;                    }&#10;                },&#10;                onRemoveTag = { tag -&gt;&#10;                    tags = tags.filter { it != tag }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(100.dp)) // Space for FAB&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        val datePickerState = rememberDatePickerState()&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let {&#10;                            dueDate = Date(it)&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FormatButton(&#10;    icon: ImageVector,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    IconButton(&#10;        onClick = onClick,&#10;        modifier = modifier&#10;            .size(40.dp)&#10;            .background(&#10;                if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)&#10;                else Color.Transparent,&#10;                CircleShape&#10;            )&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isSelected) MaterialTheme.colorScheme.primary &#10;                  else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    icon: ImageVector,&#10;    label: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = color,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun PrioritySelector(&#10;    selectedPriority: TaskPriority,&#10;    onPrioritySelected: (TaskPriority) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Priority&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            FlowRow(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                TaskPriority.values().forEach { priority -&gt;&#10;                    FilterChip(&#10;                        selected = selectedPriority == priority,&#10;                        onClick = { onPrioritySelected(priority) },&#10;                        label = { Text(priority.displayName) },&#10;                        leadingIcon = {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(12.dp)&#10;                                    .background(&#10;                                        Color(priority.color),&#10;                                        CircleShape&#10;                                    )&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtasksSection(&#10;    subtasks: List&lt;Subtask&gt;,&#10;    newSubtaskText: String,&#10;    onNewSubtaskTextChange: (String) -&gt; Unit,&#10;    onAddSubtask: () -&gt; Unit,&#10;    onToggleSubtask: (String) -&gt; Unit,&#10;    onDeleteSubtask: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Subtasks&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;${subtasks.count { it.isCompleted }}/${subtasks.size}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Add new subtask&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = newSubtaskText,&#10;                    onValueChange = onNewSubtaskTextChange,&#10;                    placeholder = { Text(&quot;Add subtask...&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),&#10;                    keyboardActions = KeyboardActions(onDone = { onAddSubtask() }),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                FloatingActionButton(&#10;                    onClick = onAddSubtask,&#10;                    modifier = Modifier.size(40.dp),&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Subtask&quot;,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            if (subtasks.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                subtasks.forEach { subtask -&gt;&#10;                    SubtaskItem(&#10;                        subtask = subtask,&#10;                        onToggle = { onToggleSubtask(subtask.id) },&#10;                        onDelete = { onDeleteSubtask(subtask.id) }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtaskItem(&#10;    subtask: Subtask,&#10;    onToggle: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                RoundedCornerShape(8.dp)&#10;            )&#10;            .padding(12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Checkbox(&#10;            checked = subtask.isCompleted,&#10;            onCheckedChange = { onToggle() }&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Text(&#10;            text = subtask.title,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.weight(1f),&#10;            color = if (subtask.isCompleted) &#10;                MaterialTheme.colorScheme.onSurfaceVariant &#10;            else &#10;                MaterialTheme.colorScheme.onSurface&#10;        )&#10;        IconButton(&#10;            onClick = onDelete,&#10;            modifier = Modifier.size(32.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Delete,&#10;                contentDescription = &quot;Delete Subtask&quot;,&#10;                tint = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun TagsSection(&#10;    tags: List&lt;String&gt;,&#10;    newTagText: String,&#10;    onNewTagTextChange: (String) -&gt; Unit,&#10;    onAddTag: () -&gt; Unit,&#10;    onRemoveTag: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Tags&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Add new tag&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = newTagText,&#10;                    onValueChange = onNewTagTextChange,&#10;                    placeholder = { Text(&quot;Add tag...&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),&#10;                    keyboardActions = KeyboardActions(onDone = { onAddTag() }),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                FloatingActionButton(&#10;                    onClick = onAddTag,&#10;                    modifier = Modifier.size(40.dp),&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Tag&quot;,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            if (tags.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                FlowRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    tags.forEach { tag -&gt;&#10;                        TagChip(&#10;                            tag = tag,&#10;                            onRemove = { onRemoveTag(tag) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TagChip(&#10;    tag: String,&#10;    onRemove: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;#$tag&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.secondary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Spacer(modifier = Modifier.width(4.dp))&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Remove Tag&quot;,&#10;                modifier = Modifier&#10;                    .size(16.dp)&#10;                    .clickable { onRemove() },&#10;                tint = MaterialTheme.colorScheme.secondary&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.ExperimentalLayoutApi&#10;import androidx.compose.foundation.layout.FlowRow&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Attachment&#10;import androidx.compose.material.icons.filled.CalendarToday&#10;import androidx.compose.material.icons.filled.Check&#10;import androidx.compose.material.icons.filled.Close&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.FormatBold&#10;import androidx.compose.material.icons.filled.FormatItalic&#10;import androidx.compose.material.icons.filled.FormatListBulleted&#10;import androidx.compose.material.icons.filled.FormatListNumbered&#10;import androidx.compose.material.icons.filled.Image&#10;import androidx.compose.material.icons.filled.KeyboardVoice&#10;import androidx.compose.material.icons.filled.Label&#10;import androidx.compose.material.icons.filled.Save&#10;import androidx.compose.material.icons.filled.Task&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.Checkbox&#10;import androidx.compose.material3.DatePicker&#10;import androidx.compose.material3.DatePickerDialog&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.ExtendedFloatingActionButton&#10;import androidx.compose.material3.FilterChip&#10;import androidx.compose.material3.FloatingActionButton&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.rememberDatePickerState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalSoftwareKeyboardController&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontStyle&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.unit.dp&#10;import com.masum.todo.domain.model.TaskColor&#10;import com.masum.todo.domain.model.TaskPriority&#10;import com.masum.todo.domain.model.Subtask&#10;import com.masum.todo.presentation.components.ColorPicker&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.UUID&#10;&#10;@OptIn(ExperimentalMaterial3Api::class, ExperimentalLayoutApi::class)&#10;@Composable&#10;fun TaskEditorScreen(&#10;    taskId: Int? = null,&#10;    onNavigateBack: () -&gt; Unit,&#10;    onSaveTask: (&#10;        heading: String,&#10;        body: String,&#10;        color: TaskColor,&#10;        priority: TaskPriority,&#10;        dueDate: Date?,&#10;        subtasks: List&lt;Subtask&gt;,&#10;        tags: List&lt;String&gt;&#10;    ) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    var taskHeading by remember { mutableStateOf(&quot;&quot;) }&#10;    var taskBody by remember { mutableStateOf(&quot;&quot;) }&#10;    var selectedColor by remember { mutableStateOf(TaskColor.DEFAULT) }&#10;    var selectedPriority by remember { mutableStateOf(TaskPriority.MEDIUM) }&#10;    var dueDate by remember { mutableStateOf&lt;Date?&gt;(null) }&#10;    var subtasks by remember { mutableStateOf(listOf&lt;Subtask&gt;()) }&#10;    var tags by remember { mutableStateOf(listOf&lt;String&gt;()) }&#10;    var newSubtaskText by remember { mutableStateOf(&quot;&quot;) }&#10;    var newTagText by remember { mutableStateOf(&quot;&quot;) }&#10;    var showDatePicker by remember { mutableStateOf(false) }&#10;    var showColorPicker by remember { mutableStateOf(false) }&#10;    var showPrioritySelector by remember { mutableStateOf(false) }&#10;    var isBold by remember { mutableStateOf(false) }&#10;    var isItalic by remember { mutableStateOf(false) }&#10;    &#10;    val keyboardController = LocalSoftwareKeyboardController.current&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { &#10;                    Text(&#10;                        text = if (taskId == null) &quot;Create Task&quot; else &quot;Edit Task&quot;,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateBack) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.background,&#10;                    titleContentColor = MaterialTheme.colorScheme.primary&#10;                )&#10;            )&#10;        },&#10;        floatingActionButton = {&#10;            ExtendedFloatingActionButton(&#10;                onClick = {&#10;                    if (taskHeading.isNotBlank()) {&#10;                        onSaveTask(&#10;                            taskHeading,&#10;                            taskBody,&#10;                            selectedColor,&#10;                            selectedPriority,&#10;                            dueDate,&#10;                            subtasks,&#10;                            tags&#10;                        )&#10;                        onNavigateBack()&#10;                    }&#10;                },&#10;                containerColor = MaterialTheme.colorScheme.primary,&#10;                contentColor = MaterialTheme.colorScheme.onPrimary&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Save,&#10;                    contentDescription = &quot;Save Task&quot;&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Save Task&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Task Title&#10;            OutlinedTextField(&#10;                value = taskHeading,&#10;                onValueChange = { taskHeading = it },&#10;                label = { Text(&quot;Task Title&quot;) },&#10;                placeholder = { Text(&quot;What needs to be done?&quot;) },&#10;                leadingIcon = {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Task,&#10;                        contentDescription = &quot;Task&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                singleLine = true,&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Rich Text Toolbar&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                ),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(8.dp),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                ) {&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatBold,&#10;                        isSelected = isBold,&#10;                        onClick = { isBold = !isBold }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatItalic,&#10;                        isSelected = isItalic,&#10;                        onClick = { isItalic = !isItalic }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatListBulleted,&#10;                        isSelected = false,&#10;                        onClick = { /* Add bullet list */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.FormatListNumbered,&#10;                        isSelected = false,&#10;                        onClick = { /* Add numbered list */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.Image,&#10;                        isSelected = false,&#10;                        onClick = { /* Add image */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.KeyboardVoice,&#10;                        isSelected = false,&#10;                        onClick = { /* Add voice note */ }&#10;                    )&#10;                    FormatButton(&#10;                        icon = Icons.Default.Attachment,&#10;                        isSelected = false,&#10;                        onClick = { /* Add attachment */ }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Task Description&#10;            OutlinedTextField(&#10;                value = taskBody,&#10;                onValueChange = { taskBody = it },&#10;                label = { Text(&quot;Description&quot;) },&#10;                placeholder = { Text(&quot;Add details about your task...&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(120.dp),&#10;                shape = RoundedCornerShape(16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Quick Actions Row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                QuickActionButton(&#10;                    icon = Icons.Default.Flag, // Changed from Priority to Flag&#10;                    label = selectedPriority.displayName,&#10;                    color = Color(selectedPriority.color),&#10;                    onClick = { showPrioritySelector = !showPrioritySelector }&#10;                )&#10;                QuickActionButton(&#10;                    icon = Icons.Default.CalendarToday,&#10;                    label = dueDate?.let { dateFormat.format(it) } ?: &quot;Due Date&quot;,&#10;                    color = MaterialTheme.colorScheme.secondary,&#10;                    onClick = { showDatePicker = true }&#10;                )&#10;                QuickActionButton(&#10;                    icon = Icons.Default.Label,&#10;                    label = &quot;Color&quot;,&#10;                    color = selectedColor.color,&#10;                    onClick = { showColorPicker = !showColorPicker }&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Priority Selector&#10;            AnimatedVisibility(&#10;                visible = showPrioritySelector,&#10;                enter = expandVertically() + fadeIn(),&#10;                exit = shrinkVertically() + fadeOut()&#10;            ) {&#10;                PrioritySelector(&#10;                    selectedPriority = selectedPriority,&#10;                    onPrioritySelected = { &#10;                        selectedPriority = it&#10;                        showPrioritySelector = false&#10;                    }&#10;                )&#10;            }&#10;&#10;            // Color Picker&#10;            AnimatedVisibility(&#10;                visible = showColorPicker,&#10;                enter = expandVertically() + fadeIn(),&#10;                exit = shrinkVertically() + fadeOut()&#10;            ) {&#10;                Column {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    ColorPicker(&#10;                        selectedColor = selectedColor,&#10;                        onColorSelected = { &#10;                            selectedColor = it&#10;                            showColorPicker = false&#10;                        }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;            }&#10;&#10;            // Subtasks Section&#10;            SubtasksSection(&#10;                subtasks = subtasks,&#10;                newSubtaskText = newSubtaskText,&#10;                onNewSubtaskTextChange = { newSubtaskText = it },&#10;                onAddSubtask = {&#10;                    if (newSubtaskText.isNotBlank()) {&#10;                        subtasks = subtasks + Subtask(&#10;                            id = UUID.randomUUID().toString(),&#10;                            title = newSubtaskText&#10;                        )&#10;                        newSubtaskText = &quot;&quot;&#10;                    }&#10;                },&#10;                onToggleSubtask = { subtaskId -&gt;&#10;                    subtasks = subtasks.map { subtask -&gt;&#10;                        if (subtask.id == subtaskId) {&#10;                            subtask.copy(isCompleted = !subtask.isCompleted)&#10;                        } else subtask&#10;                    }&#10;                },&#10;                onDeleteSubtask = { subtaskId -&gt;&#10;                    subtasks = subtasks.filter { it.id != subtaskId }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Tags Section&#10;            TagsSection(&#10;                tags = tags,&#10;                newTagText = newTagText,&#10;                onNewTagTextChange = { newTagText = it },&#10;                onAddTag = {&#10;                    if (newTagText.isNotBlank() &amp;&amp; !tags.contains(newTagText)) {&#10;                        tags = tags + newTagText&#10;                        newTagText = &quot;&quot;&#10;                    }&#10;                },&#10;                onRemoveTag = { tag -&gt;&#10;                    tags = tags.filter { it != tag }&#10;                }&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(100.dp)) // Space for FAB&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDatePicker) {&#10;        val datePickerState = rememberDatePickerState()&#10;        DatePickerDialog(&#10;            onDismissRequest = { showDatePicker = false },&#10;            confirmButton = {&#10;                TextButton(&#10;                    onClick = {&#10;                        datePickerState.selectedDateMillis?.let {&#10;                            dueDate = Date(it)&#10;                        }&#10;                        showDatePicker = false&#10;                    }&#10;                ) {&#10;                    Text(&quot;OK&quot;)&#10;                }&#10;            },&#10;            dismissButton = {&#10;                TextButton(onClick = { showDatePicker = false }) {&#10;                    Text(&quot;Cancel&quot;)&#10;                }&#10;            }&#10;        ) {&#10;            DatePicker(state = datePickerState)&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FormatButton(&#10;    icon: ImageVector,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    IconButton(&#10;        onClick = onClick,&#10;        modifier = modifier&#10;            .size(40.dp)&#10;            .background(&#10;                if (isSelected) MaterialTheme.colorScheme.primary.copy(alpha = 0.2f)&#10;                else Color.Transparent,&#10;                CircleShape&#10;            )&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = if (isSelected) MaterialTheme.colorScheme.primary &#10;                  else MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QuickActionButton(&#10;    icon: ImageVector,&#10;    label: String,&#10;    color: Color,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.clickable { onClick() },&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Icon(&#10;                imageVector = icon,&#10;                contentDescription = label,&#10;                tint = color,&#10;                modifier = Modifier.size(24.dp)&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                textAlign = TextAlign.Center,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun PrioritySelector(&#10;    selectedPriority: TaskPriority,&#10;    onPrioritySelected: (TaskPriority) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Priority&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            FlowRow(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                TaskPriority.values().forEach { priority -&gt;&#10;                    FilterChip(&#10;                        selected = selectedPriority == priority,&#10;                        onClick = { onPrioritySelected(priority) },&#10;                        label = { Text(priority.displayName) },&#10;                        leadingIcon = {&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(12.dp)&#10;                                    .background(&#10;                                        Color(priority.color),&#10;                                        CircleShape&#10;                                    )&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtasksSection(&#10;    subtasks: List&lt;Subtask&gt;,&#10;    newSubtaskText: String,&#10;    onNewSubtaskTextChange: (String) -&gt; Unit,&#10;    onAddSubtask: () -&gt; Unit,&#10;    onToggleSubtask: (String) -&gt; Unit,&#10;    onDeleteSubtask: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Subtasks&quot;,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Text(&#10;                    text = &quot;${subtasks.count { it.isCompleted }}/${subtasks.size}&quot;,&#10;                    style = MaterialTheme.typography.bodySmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Add new subtask&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = newSubtaskText,&#10;                    onValueChange = onNewSubtaskTextChange,&#10;                    placeholder = { Text(&quot;Add subtask...&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),&#10;                    keyboardActions = KeyboardActions(onDone = { onAddSubtask() }),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                FloatingActionButton(&#10;                    onClick = onAddSubtask,&#10;                    modifier = Modifier.size(40.dp),&#10;                    containerColor = MaterialTheme.colorScheme.primary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Subtask&quot;,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            if (subtasks.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                subtasks.forEach { subtask -&gt;&#10;                    SubtaskItem(&#10;                        subtask = subtask,&#10;                        onToggle = { onToggleSubtask(subtask.id) },&#10;                        onDelete = { onDeleteSubtask(subtask.id) }&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SubtaskItem(&#10;    subtask: Subtask,&#10;    onToggle: () -&gt; Unit,&#10;    onDelete: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Row(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                RoundedCornerShape(8.dp)&#10;            )&#10;            .padding(12.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Checkbox(&#10;            checked = subtask.isCompleted,&#10;            onCheckedChange = { onToggle() }&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Text(&#10;            text = subtask.title,&#10;            style = MaterialTheme.typography.bodyMedium,&#10;            modifier = Modifier.weight(1f),&#10;            color = if (subtask.isCompleted) &#10;                MaterialTheme.colorScheme.onSurfaceVariant &#10;            else &#10;                MaterialTheme.colorScheme.onSurface&#10;        )&#10;        IconButton(&#10;            onClick = onDelete,&#10;            modifier = Modifier.size(32.dp)&#10;        ) {&#10;            Icon(&#10;                imageVector = Icons.Default.Delete,&#10;                contentDescription = &quot;Delete Subtask&quot;,&#10;                tint = MaterialTheme.colorScheme.error,&#10;                modifier = Modifier.size(16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalLayoutApi::class)&#10;@Composable&#10;private fun TagsSection(&#10;    tags: List&lt;String&gt;,&#10;    newTagText: String,&#10;    onNewTagTextChange: (String) -&gt; Unit,&#10;    onAddTag: () -&gt; Unit,&#10;    onRemoveTag: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;Tags&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(12.dp))&#10;            &#10;            // Add new tag&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                OutlinedTextField(&#10;                    value = newTagText,&#10;                    onValueChange = onNewTagTextChange,&#10;                    placeholder = { Text(&quot;Add tag...&quot;) },&#10;                    modifier = Modifier.weight(1f),&#10;                    singleLine = true,&#10;                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Done),&#10;                    keyboardActions = KeyboardActions(onDone = { onAddTag() }),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                FloatingActionButton(&#10;                    onClick = onAddTag,&#10;                    modifier = Modifier.size(40.dp),&#10;                    containerColor = MaterialTheme.colorScheme.secondary&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Add,&#10;                        contentDescription = &quot;Add Tag&quot;,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            &#10;            if (tags.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                FlowRow(&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    tags.forEach { tag -&gt;&#10;                        TagChip(&#10;                            tag = tag,&#10;                            onRemove = { onRemoveTag(tag) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TagChip(&#10;    tag: String,&#10;    onRemove: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier,&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;#$tag&quot;,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                color = MaterialTheme.colorScheme.secondary,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Spacer(modifier = Modifier.width(4.dp))&#10;            Icon(&#10;                imageVector = Icons.Default.Close,&#10;                contentDescription = &quot;Remove Tag&quot;,&#10;                modifier = Modifier&#10;                    .size(16.dp)&#10;                    .clickable { onRemove() },&#10;                tint = MaterialTheme.colorScheme.secondary&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.filled.PlaylistAdd&#10;import androidx.compose.material.icons.filled.PlaylistAdd&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;                    imageVector = Icons.Default.PlaylistAdd,&#10;                Icon(&#10;                    imageVector = Icons.Default.PlaylistAdd,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.GridView&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Default.ViewList else Icons.Default.GridView,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Filled.ViewList else Icons.Filled.ViewModule,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>