<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    &#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.masum.todo&quot;&#10;    compileSdk = 35&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.masum.todo&quot;&#10;        minSdk = 21&#10;        targetSdk = 35&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.core)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    &#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.lifecycle.viewmodel.ktx)&#10;    &#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    &#10;    // Coroutines&#10;    implementation(libs.kotlinx.coroutines.android)&#10;    implementation(&quot;androidx.compose.material:material-icons-extended&quot;)&#10;    &#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/EmptyState.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlaylistAdd&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PlaylistAdd,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.expandVertically&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.shrinkVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Add&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun EmptyState(&#10;    modifier: Modifier = Modifier&#10;) {&#10;    AnimatedVisibility(&#10;        visible = true,&#10;        enter = fadeIn() + expandVertically(expandFrom = Alignment.CenterVertically),&#10;        exit = fadeOut() + shrinkVertically(shrinkTowards = Alignment.CenterVertically),&#10;        modifier = modifier.fillMaxSize()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .background(&#10;                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        CircleShape&#10;                    ),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Add,&#10;                    contentDescription = &quot;No tasks&quot;,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.primary.copy(alpha = 0.7f)&#10;                )&#10;            }&#10;            &#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            &#10;            Text(&#10;                text = &quot;No tasks yet!&quot;,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = MaterialTheme.colorScheme.onSurface,&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            &#10;            Text(&#10;                text = &quot;Tap the + button to add your first task\nand start being productive!&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.alpha(0.8f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/masum/todo/presentation/components/ViewToggleButton.kt" />
              <option name="originalContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.GridView&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Default.ViewList else Icons.Default.GridView,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.masum.todo.presentation.components&#10;&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.animation.core.tween&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ViewModule&#10;import androidx.compose.material.icons.filled.ViewList&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.IconButtonDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.rotate&#10;import androidx.compose.ui.unit.dp&#10;&#10;@Composable&#10;fun ViewToggleButton(&#10;    isGridView: Boolean,&#10;    onToggleView: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val rotation by animateFloatAsState(&#10;        targetValue = if (isGridView) 0f else 180f,&#10;        animationSpec = tween(300),&#10;        label = &quot;view_toggle_rotation&quot;&#10;    )&#10;    &#10;    IconButton(&#10;        onClick = onToggleView,&#10;        colors = IconButtonDefaults.iconButtonColors(&#10;            contentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;        ),&#10;        modifier = modifier&#10;    ) {&#10;        Icon(&#10;            imageVector = if (isGridView) Icons.Filled.ViewList else Icons.Filled.ViewModule,&#10;            contentDescription = if (isGridView) &quot;Switch to list view&quot; else &quot;Switch to grid view&quot;,&#10;            modifier = Modifier&#10;                .size(24.dp)&#10;                .rotate(rotation)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>